PKG_NAME=test-2.4
PKG_DEFAULT=test
PKG_VERSION=1
PKG_MAINTAINER=Test
PKG_SHORT_DESCRIPTION="test-2.4: one exec, default package"
PKG_SECTION=tools

pkg_build() 
{ 
  return 0
}

pkg_install() 
{
  mkdir -p $1${bindir}

  cat >$1${bindir}/foo <<EOT
#!/bin/bash
echo "hello world"
EOT
  chmod +x $1${bindir}/foo
  
  return 0
}

pkg_test ()
{
  local deb=$1
  local ddeb=$2

  # build ok
  if ! [ -e ${deb} ]; then
     echo "package does not exist"
     return 1
  fi
  # default deb too
  if ! [ -e ${ddeb} ]; then
     echo "default package does not exist"
     return 1
  fi

  # deb contains binary
  if ! dpkg-deb -c ${deb} | grep -q usr/local/tools/test-2.4/bin/foo; then
      echo "main package does not contain expected executable"
      return 1
  fi
  # default deb too
  if ! dpkg-deb -c ${ddeb} | grep -q usr/local/tools/test/bin/foo; then
      echo "default package does not contain expected executable"
      return 1
  fi

  # dotkit: present
  if ! tmpdir=$(mktemp -d) ; then
     echo "mktemp failed"
     return 1
  fi
  if ! dpkg-deb -e ${deb} ${tmpdir}; then
     echo "failed to extract metadata from main deb"
     rm -rf ${tmpdir}
     return 1
  fi
  if ! [ -e ${tmpdir}/dk ]; then
     echo "dotkit was not included in main deb"
     return 1
  fi 

  # dotkit: alters PATH properly
  if ! grep -q "dk_alter PATH /usr/local/tools/test-2.4/bin" ${tmpdir}/dk; then
     echo "expected dotkit info not in main deb"
     rm -rf ${tmpdir}
     return 1
  fi

  rm -rf ${tmpdir}

  # Now same thing for default package

  # dotkit: present
  if ! tmpdir=$(mktemp -d) ; then
     echo "mktemp failed"
     return 1
  fi
  if ! dpkg-deb -e ${ddeb} ${tmpdir}; then
     echo "failed to extract metadata from default deb"
     rm -rf ${tmpdir}
     return 1
  fi
  if ! [ -e ${tmpdir}/dk ]; then
     echo "dotkit was not included in default deb"
     return 1
  fi 

  # dotkit: alters PATH properly
  if ! grep -q "dk_alter PATH /usr/local/tools/test/bin" ${tmpdir}/dk; then
     echo "expected dotkit info not in default deb"
     #rm -rf ${tmpdir}
     echo See ${tmpdir}
     return 1
  fi

  rm -rf ${tmpdir}

  return 0
}
