PKG_NAME=test
PKG_VERSION=1
PKG_MAINTAINER=Test
PKG_SHORT_DESCRIPTION="test: one exec, custom dotkit"
PKG_SECTION=tools

PKG_dk="this is my broken dotkit\n\
that expands newlines\n\
and macros like ${prefix}"

pkg_build() 
{ 
  return 0
}

pkg_install() 
{
  mkdir -p $1${bindir}
  cat >$1${bindir}/foo <<EOT
#!/bin/bash
echo "hello world"
EOT
  chmod +x $1${bindir}/foo
  
  return 0
}

pkg_test ()
{
  local deb=$1
  local lines

  # build ok
  if ! [ -e ${deb} ]; then
     echo "package does not exist"
     return 1
  fi

  # build contains binary
  if ! dpkg-deb -c ${deb} | grep -q usr/local/tools/test/bin/foo; then
      echo "package does not contain expected executable"
      return 1
  fi

  # PKG_dk resulted in a dotkit
  if ! tmpdir=$(mktemp -d) ; then
     echo "mktemp failed"
     return 1
  fi
  if ! dpkg-deb -e ${deb} ${tmpdir}; then
     echo "could not extract metadata"
     rm -rf ${tmpdir}
     return 1
  fi

  # dotkit: not an automatic one
  if ! grep -q "this is my broken dotkit" ${tmpdir}/dk; then
     echo "dotkit is not custom"
     rm -rf ${tmpdir}
     return 1
  fi

  # ${prefix} was expanded
  if ! grep -q "macros like /usr/local/tools/test" ${tmpdir}/dk; then
     echo "macros not expanded"
     rm -rf ${tmpdir}
     return 1
  fi

  # dotkit: \n expanded 
  if ! lines=$(wc -l < ${tmpdir}/dk); then
     echo "dotkit was not included in package"
     return 1
  fi
  if [ ${lines} != 3 ]; then
     echo "newlines were not expanded in dotkit"
     rm -rf ${tmpdir}
     return 1
  fi

  rm -rf ${tmpdir}
  return 0
}
